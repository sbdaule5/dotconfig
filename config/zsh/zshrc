################################################################################
#                           SHELL PROMPT                                       #
################################################################################
autoload -Uz vcs_info
precmd() { vcs_info }
zstyle ':vcs_info:git:*' formats '[  %b ] '

# Determines prompt modifier if and when a conda environment is active
precmd_conda_info() {
  if [[ -n $CONDA_DEFAULT_ENV ]]; then
    if [ "$CONDA_DEFAULT_ENV" != "base" ]; then
      conda_info_msg_0_="[  $CONDA_DEFAULT_ENV ] "
    else
      conda_info_msg_0_="[  ] "
    fi
  else
    conda_info_msg_0_=""
  fi
}
precmd_functions+=( precmd_conda_info )

autoload -U colors && colors	# Load colors
setopt PROMPT_SUBST
PROMPT_PARTS=(
  '%B%{$fg[red]%}['
  '%{$fg[yellow]%}%n'
  '%{$fg[green]%}@'
  '%{$fg[blue]%}%M '
  '%{$fg[red]%}${vcs_info_msg_0_}'
  '%{$fg[green]%}${conda_info_msg_0_}'
  '%{$fg[magenta]%}%~'
  '%{$fg[red]%}] $ '
  '%{$reset_color%}'
)
PROMPT="${(j::)PROMPT_PARTS}"


setopt autocd		# Automatically cd into typed directory.
stty stop undef		# Disable ctrl-s to freeze terminal.
setopt interactive_comments

################################################################################
#                           SHELL HISTORY                                      #
################################################################################
setopt INC_APPEND_HISTORY
setopt histignoredups
setopt histignorespace
setopt histexpiredupsfirst
setopt appendhistory
setopt INC_APPEND_HISTORY
# setopt SHARE_HISTORY

HISTFILE=${XDG_STATE_HOME:-~/.local/state}/zsh/history
HISTSIZE=500000
SAVEHIST=400000

################################################################################
#                               COMPLETIONS                                    #
################################################################################

setopt nocaseglob
autoload -Uz compinit
zstyle :compinstall filename "$HOME/.config/zsh/.zshrc"
zstyle ':completion:*' menu select
zmodload zsh/complist
_comp_options+=(globdots)		# Include hidden files.
compinit
source /usr/share/fzf/completion.zsh
source /usr/share/fzf/key-bindings.zsh

################################################################################
#                                 ALISES                                       #
################################################################################
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliasrc" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliasrc"
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/funcs" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/funcs"
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/keys" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/keys"

################################################################################
#                               KEYBINDINGS                                    #
################################################################################
# vi mode
# bindkey -v
export KEYTIMEOUT=1

# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

# Change cursor shape for different vi modes.
function zle-keymap-select () {
    case $KEYMAP in
        vicmd) echo -ne '\e[1 q';;      # block
        viins|main) echo -ne '\e[5 q';; # beam
    esac
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

# Emacs keybindings
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
bindkey '^B' backward-char
bindkey '^F' forward-char
bindkey '^[b' backward-word
bindkey '^[f' forward-word
bindkey '^U' backward-kill-line
bindkey '^K' kill-line
bindkey '^L' clear-screen
bindkey '^W' backward-kill-word
bindkey '^P' up-line-or-history
bindkey '^N' down-line-or-history

setopt beep

################################################################################
#                             ZSH PLUGINS                                      #
################################################################################
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

conda_init () {
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/sbdaule/.local/share/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/sbdaule/.local/share/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/sbdaule/.local/share/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/sbdaule/.local/share/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
}

################################################################################
#                             CONFIG FOR LOCAL SYSTEM
################################################################################
# Local config will override global/general one
if [ -f "$XDG_CONFIG_HOME/zsh/localrc" ]
then
    source "$XDG_CONFIG_HOME/zsh/localrc"
fi

################################################################################
#                             CONFIG FOR TMUX SESSIONS                         #
################################################################################
if [ -n "$TMUX" ]
then
    TMUX_SESSION_NAME=$(tmux display-message -p '#S')
    # Keep bash history of different tmux sessions seperate
    export HISTFILE=${XDG_STATE_HOME:-~/.local/state}/zsh/tmux-history/${TMUX_SESSION_NAME}

    # Load tmux session specific configs
    if [ -f "${XDG_CONFIG_HOME}/zsh/tmux/${TMUX_SESSION_NAME}.zsh" ]; then
        source ${XDG_CONFIG_HOME}/zsh/tmux/${TMUX_SESSION_NAME}.zsh
    fi
fi
